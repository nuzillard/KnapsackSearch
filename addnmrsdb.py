"""
this module takes file named path/filename.sdf and produces path/nmrsdb_filename.sdf
in which the sdf tag NMRSHIFTDB2_ASSIGNMENT is created if not existing
or modified otherwise. The multi-line value associated to the tag is the prediction
of the 13C NMR chemical shift calculated by the nmrshiftdb2 predictor wrapped in predictSdf.
Each line is like N, XX.XX \ if which is a carbon atom number (start at 1, refers to mol block)
and XX.XX the corresponding predicted chemical shift value.

example: python addnmrsdb.py quercetin2D.sdf
result: creates nmrsdb_quercetin2D.sdf
note: quercetin2D.sdf is quercetin in 2D from pubchem, with all pubchem-related sdf tags removed
"""

import sys
import os
import tempfile
import NMRSDBSort
import sdfrw

def run_command(command):
	"""
	run_command() forwards a command to the OS through a call to os.system()
	"""
	print("Running:",  command)
# print command to run
	code = os.system(command)
# run command
	print("\"%s\" returned with code: %d\n" % (command, code))
# print code returned by OS, 0 for Windows, something else for Linux/MacOS (none tested)

def transform(mol, nmr_line):
	"""
	transforms() updates mol, a molecule in sdfrw format according to NMR information in nmr_line
	"""
	nmrkey = "NMRSHIFTDB2_ASSIGNMENT"
# targetted SDF tag
	try:
# a problem occured here once	
		molindex, atoms_string, shifts_string = nmr_line.split(' | ')
# decompose nmr_line in its three fields.
	except:
# the error occured. May be non-reproducible.
# the error message was about being unable to split nmr_line into 3 pieces separated by |
		print("Bad line from NMRSDBSort python module")
# print error message
		print(nmr_line)
# print offending line from NMRSDBSort
		sys.exit(1)
# stop execution if an error eccurs in the reading of the output of NMRSDBSort
	atoms = atoms_string.split(' ')
# list of carbon atom indexes
	shifts = shifts_string.split(' ')
# list of carbon chemical shifts
	new_nmr = '>  <' + nmrkey + '>\n'
# start to build a new NMRSHIFTDB2_ASSIGNMENT text
	for atom, shift in zip(atoms, shifts):
# loop over atoms and chemical shifts
		new_nmr += (atom + ', ' + shift + ' \\\n')
# add a line to NMRSHIFTDB2_ASSIGNMENT text according to the current atom and its chemical shift value
	new_nmr = new_nmr.strip()
# removed trailing \n from tag value as required by module sdfrw
	new_pair = (nmrkey, new_nmr)
# new tag-value pair

	sdfkeyvals = mol["keyvals"]
# get the list of pairs that is relative to the current molecule.
	sdfkeys = [kv[0] for kv in sdfkeyvals]
# build list of sdf tags

	if nmrkey in sdfkeys:
# NMRSHIFTDB2_ASSIGNMENT data is already there. Will be replaced
		nmr_pos = sdfkeys.index(nmrkey)
# find index of NMRSHIFTDB2_ASSIGNMENT sdf tag
		sdfkeyvals[nmr_pos] = new_pair
# replace old NMRSHIFTDB2_ASSIGNMENT by the new one
	else:
# the current molecule has no NMRSHIFTDB2_ASSIGNMENT
		sdfkeyvals.append(new_pair)
# create a new entry in the list of pairs of sdf tags and associated values

	mol["keyvals"] = sdfkeyvals
# change molecule with the new content of keyvals, molblock is unchanged
	return mol
# return the changed molecule


def fuse(filenameIn, filenameOut, filenameNMR):
	"""
	fuse() changes file filenameIn to give file filenameOut according to NMR data in file filenameNMR
	"""
	with open(filenameNMR, 'r') as fhNMR, open(filenameIn, 'r') as fhIn, open(filenameOut, "w") as fhOut:
# open NMR file for reading and repaired file for writing
		for molIn in sdfrw.sdfReader(fhIn):
# iterate over molecules in the original .nredata.sdf file
			nmr_line = fhNMR.readline().strip()
# read a line for the current molecule that describes the change
			molOut = transform(molIn, nmr_line) if nmr_line else molIn
# get the changed molecule if it has to be changed according to nmrshiftdb2.
# no change if the current molecule has no carbon atom
			sdfrw.sdfWrite(fhOut, molOut)
# write the changed molecule

def addnmrsdb(filenameIn):
	"""
	addnmrsdb() completes the .sdf file filenameIn with NMRSHIFTDB2_ASSIGNMENT tags
	obtained from the local 13C NMR chemical shift predictor (nmrshiftdb2).
	If an NMRSHIFTDB2_ASSIGNMENT tag already exists its value is replaced by the
	one generated by this script. If this tag does not exist, it will be created.
	"""
	tempname1 = tempfile.mktemp('.txt')
# The name of a .txt file in C:\Users\jmn\AppData\Local\Temp or /tmp that contains the raw result of the 13C
# chemical shift prediction
	command = "predictSdf " + filenameIn + " 32 3d >" + tempname1 + " 2>errorlog.txt"
# prepare prediction command
	print(command)
# check prediction command
	run_command(command)
# run 13C NMR chemical shift prediction
	tempname2 = tempfile.mktemp('.txt')
# get a temp file name for the sorted molecules and atoms obtained after 13C NMR prediction
	NMRSDBSort.molsort(tempname1, tempname2)
# sort molecules in file and atoms in molecules after 13C NMR prediction
	os.unlink(tempname1)
# first temp fie not needed anymore
	head, tail = os.path.split(filenameIn)
# prepare the creation of the output file name
	filenameOut = os.path.join(head, 'nmrsdb_' + tail)
# prepend nmrsdb_ to input file name to obtain the output file name
	fuse(filenameIn, filenameOut, tempname2)
# create output file according to input file and calculed 13C NMR chemical shifts	
	os.unlink(tempname2)
# second temp file not needed anymore

if __name__ == "__main__":
	argc = len(sys.argv)
# get number of command line arguments + 1
	if argc != 2:
# only one argument possible, the name of the .sdf input file
		print("Usage: %s: filename.sdf" % (argv[0],))
		sys.exit(1)
	filenameIn = sys.argv[1]
# get input .sdf file name
	addnmrsdb(filenameIn)
# create or update NMRSHIFTDB2_ASSIGNMENT tag in the .sdf input file whose name is given as command line argument

